#!/usr/bin/ruby

# Even Fibonacci numbers
# Problem 2
# Each new term in the Fibonacci sequence is generated by adding the previous
#   two terms. By starting with 1 and 2, the first 10 terms will be:
# 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, ...
# By considering the terms in the Fibonacci sequence whose values do not exceed
#   four million, find the sum of the even-valued terms.

# http://projecteuler.net/problem=2
# andrew etringer

def fib( max_val )
  x = [ 1, 2 ]
  while
    next_val = ( x[ -2 ] + x[ -1 ] )
    return x if next_val > max_val
    x << next_val 
  end
end

# method 1
# select only even numbers and sum
puts fib( 4e6 ).select{ |x| 0 == ( x % 2 ) }.inject( :+ )

# method 2
# every 3rd value is even (starting with the 2nd value (2)); sum them
new_seq = []
fib( 4e6 ).each_with_index{ |x,ix| new_seq << x if 1 == ( ix % 3 ) }
puts new_seq.inject( :+ )
